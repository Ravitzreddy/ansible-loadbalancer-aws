---
 - hosts: localhost
   connection: local
   gather_facts: false
   tasks:
     - name: install latest boto3
       pip:
         name: "{{ item }}"
       with_items:
         - boto3
         - botocore
       #delegate_to: "{{ ec2_instance_ip }}"

     - name: get my current ip address
       uri:
         url: http://checkip.amazonaws.com
         return_content: yes
       register: my_ip

     - name: create a simple security group
       ec2_group:
         name: webservers
         description: A security group for my current IP ADDRESS
         region: ap-south-1
         rules:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
           - proto: tcp
             from_port: 22
             to_port: 22
             cidr_ip: "{{ my_ip.content | replace('\n', '') }}/32"
         rules_egress:
           - proto: tcp
             from_port: 80
             to_port: 80
             cidr_ip: 0.0.0.0/0
       register: webservers_group

     - name: Create the ELB only listening over port 80
       ec2_elb_lb:
         name: ravitz-load-balancer
         state: present
         region: ap-south-1
         zones:
           - ap-south-1a
           - ap-south-1b
         listeners:
           - protocol: http
             load_balancer_port: 80
             instance_port: 80
       register: elb

     - name: spin two ec2 instances
       ec2:
         key_name: myprimeadmkeypair
         instance_type: t2.micro
         image: ami-5b673c34
         region: ap-south-1
         group_id:
           - "{{ webservers_group.group_id }}"
           - "{{ elb.elb.security_group_ids | first }}"
         wait: yes
         instance_tags: 
           application: ravitz
         count: 2
         count_tag: 
           application: ravitz
       register: ec2_inst

     - name: Store EC2 instance IPs to a provision against
       add_host:
         hostname: "{{ item.public_ip }}"
         groupname: ec2_instance_ips
         debug:
          msg: "{{ ec2_instance_ips.group_id }}" 
       with_items: "{{ ec2_inst.tagged_instances }}"


     - name: wait for server to come online
       wait_for:
         host: "{{ item.public_ip }}"
         port: 22
         timeout: 180
       with_items: "{{ ec2_inst.tagged_instances }}"

     - name: Add ec2 instances to known hosts
       known_hosts:
         name: "{{ item.public_ip }}"
         key: "{{ lookup('pipe', ssh-keyscan -t rsa ' + item.public_ip) }}"
       with_items: "{{ ec2_inst.tagged_instances }}"

 - hosts: localhost
   connection: local
   gather_facts: false
   tasks:
     - name: Add each EC2 instance to the ELB
       ec2_elb:
         state: present
         ec2_elbs: ravitz-load-balancer
         region: ap-south-1
         instance_id: "{{ item.id }}"
       with_items: "{{ ec2_inst.tagged_instances }}"
